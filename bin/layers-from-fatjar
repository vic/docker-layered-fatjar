#!/usr/bin/env bash
set -Eeuo pipefail

function usage() {
cat <<-EOF
USAGE: $0 [options] <fat.jar> [output-directory]

Split a fat-jar into reusable docker layers.


OPTIONS:

-h, --help            Print this help and exit.

-r, --rm              Remove <output-directory> before doing anything else.

-- ARGS               Indicate aguments for docker build or nix build.

-B, --docker-build    Run Docker build.
                      You might want to use -- to indicate arguments for 'docker build'.
                      eg: '-- -t my-app:latest'

-N, --nix-build       Build a derivation from nix streamLayeredImage.
                      You might want to use -- to indicate arguments for 'nix build'.
                      eg: '-- --show-trace'
                      Implies --nix.

-t, --top-layer       Create a layer for top-level files inside fatjar.
                      This layer is likely used for .conf/properties files.

-a, --add-layer PATH  Create a layer from directory at PATH inside fatjar.
                      This option can be specified many times.

-s, --size SIZE       Create a layer for directories exeeding SIZE.
                      Default SIZE is: 2M.

-l, --limit N         Create at most N layers. Docker maximum is 127.

-c, --content PATH    Place layers at PATH inside the docker fileystem.
                      Defaults to /app. Layers will be at /app/layer-*.jar

-m, --main CLASS      Use CLASS as entrypoint.
                      Defaults to Main-Class from fatjar manifest.

-n, --nix             Generate a flake.nix file producing a
                      nixpkgs.dockerTools.buildLayeredImage.

Homepage: https://github.com/vic/docker-layered-fatjar
EOF
  exit 1
}

EXPLICIT_LAYERS=()
CONTENT_ROOT="/app"
SIZE="2M"
LIMIT=127
NIXGEN=""
USETOP=""
RMOUT=""
ASSEMBLY_JAR=""
WORKDIR=""
FROMBASE="gcr.io/distroless/java"
MAIN=""
RUN_DOCKER_BUILD=""
RUN_NIX_BUILD=""
ARGS=()

while test -n "${1:-}"; do
  case "$1" in
    "-h" | "--help")
      usage
      ;;
    "-a" | "--add-layer")
      EXPLICIT_LAYERS+=("$2")
      shift; shift
      ;;
    "-c" | "--content")
      CONTENT_ROOT="$2"
      shift; shift
      ;;
    "-l" | "--limit")
      LIMIT="$2"
      shift; shift
      ;;
    "-s" | "--size")
      SIZE="$2"
      shift; shift
      ;;
    "-m" | "--main")
      MAIN="$2"
      shift; shift
      ;;
    "-t" | "--top-layer")
      USETOP="true"
      shift
      ;;
    "-B" | "--docker-build")
      RUN_DOCKER_BUILD="true"
      shift
      ;;
    "-N" | "--nix-build")
      NIXGEN="true"
      RUN_NIX_BUILD="true"
      shift
      ;;
    "-n" | "--nix")
      NIXGEN="true"
      shift
      ;;
    "-r" | "--rm")
      RMOUT="true"
      shift
      ;;
    "--")
      shift
      ARGS=("$@")
      break
      ;;
    *)
      if test -z "$ASSEMBLY_JAR"; then
        ASSEMBLY_JAR="$(realpath "$1")"
        shift
        continue
      fi
      if test -z "$WORKDIR"; then
        WORKDIR="$1"
        shift
        continue
      fi
      break
      ;;
  esac
done

if test -z "$ASSEMBLY_JAR"; then
  usage
fi

if test -z "$WORKDIR"; then
  WORKDIR="$PWD/layers"
fi

if test -n "$RMOUT"; then
  rm -rf "$WORKDIR"
fi

LAYER=0
mkdir -p "$WORKDIR/layer-$LAYER"
(cd "$WORKDIR/layer-$LAYER" && jar -xf "$ASSEMBLY_JAR" || true)

if test -z "$MAIN" && test -f "$WORKDIR/layer-0/META-INF/MANIFEST.MF"; then
  MAIN="$(awk '/Main-Class:/{print$2}' $WORKDIR/layer-0/META-INF/MANIFEST.MF | tr -d '\r\n')"
fi

if test -n "$USETOP"; then
  LAYER=$((LAYER+1))
  ##
  # Top level files, eg: application.conf, reference.conf, etc.
  ##
  mkdir -p "$WORKDIR/layer-$LAYER"
  find "$WORKDIR/layer-0" -mindepth 1 -maxdepth 1 -type f | xargs mv -t "$WORKDIR/layer-$LAYER"
fi

for dir in "${EXPLICIT_LAYERS[@]}"; do
  if test "$LAYER" -gt "$LIMIT"; then
    break
  fi
  if [ ! -d "$WORKDIR/layer-0/$dir" ]; then # only directories
    continue
  fi
  LAYER=$((LAYER+1))
  name="layer-$LAYER"
  mkdir -p "${WORKDIR}/$name/$(dirname "$dir")"
  mv "${WORKDIR}/layer-0/$dir" "${WORKDIR}/$name/$dir"
done

function dirs_exeeding_size() {
  du -h "$WORKDIR/layer-0" -S -t $SIZE | sort -hr | awk '{print $2}' | xargs realpath -m --relative-to "$WORKDIR/layer-0"
}

for dir in $(dirs_exeeding_size); do
  if test "$LAYER" -gt "$LIMIT"; then
    break
  fi
  if [ ! -d "$WORKDIR/layer-0/$dir" ]; then # only directories
    continue
  fi
  LAYER=$((LAYER+1))
  name="layer-$LAYER"
  mkdir -p "${WORKDIR}/$name/$(dirname "$dir")"
  mv "${WORKDIR}/layer-0/$dir" "${WORKDIR}/$name/$dir"
done


for n in $(seq 0 $LAYER); do
  jar -c -M -f "$WORKDIR/layer-$n.jar" -C "$WORKDIR/layer-$n" .
  rm -rf "$WORKDIR/layer-$n"
done

# Generate classpath.txt
CPFILE="$WORKDIR/classpath.txt"
printf "" > "$CPFILE"
for n in $(seq 0 $LAYER); do
  if test "$n" -gt 0; then
    printf ":" >> "$CPFILE"
  fi
  printf "%s" "$CONTENT_ROOT/layer-$n.jar" >> "$CPFILE"
done
CPVAL="$(< $CPFILE)"

# Generate Dockerfile
DKFILE="$WORKDIR/Dockerfile"
echo "FROM $FROMBASE" > "$DKFILE"
for n in $(seq 0 $LAYER); do
  if test "$n" -gt 0; then
    printf "\n" >> "$DKFILE"
  fi
  printf "COPY %s %s" "layer-$n.jar" "$CONTENT_ROOT/" >> "$DKFILE"
done
printf "\n" >> "$DKFILE"

cat <<-EOF >> "$DKFILE"
ENV CLASSPATH "$CPVAL"
CMD []
EOF
if test -n "$MAIN"; then
  cat <<-EOF >> "$DKFILE"
ENTRYPOINT [ "java", "$MAIN" ]
EOF
fi

if test -n "$NIXGEN"; then
  cp "${NIX_TEMPLATE}"/*.nix "$WORKDIR/"
  if ! test -f "$WORKDIR/baseImage.nix"; then
    echo nix-prefetch-docker "$FROMBASE" >&2
    nix-prefetch-docker "$FROMBASE" > "$WORKDIR/baseImage.nix"
  fi
  cat <<-EOF > "$WORKDIR/args.nix"
{ pkgs, ...}: {
  nLayers = $LAYER + 1; # Exclusive.
  contentRoot = "$CONTENT_ROOT";
  main = "$MAIN";
}
EOF
fi

if test -n "$RUN_DOCKER_BUILD" && test -z "$RUN_NIX_BUILD"; then
  docker build "$WORKDIR" "${ARGS[@]}"
fi

if test -n "$RUN_NIX_BUILD" && test -z "$RUN_DOCKER_BUILD"; then
  (cd "$WORKDIR"; git init; git add . ; nix build "$WORKDIR" "${ARGS[@]}")
  cat <<-EOF
To load your image locally, use:

  $WORKDIR/result/bin/load-to-local-docker

To push your image to a remote container registry, use: (no docker daemon needed)

  $WORKDIR/result/bin/copy-to-docker-registry docker://some_docker_registry/myimage:tag
EOF
fi

exit 0
